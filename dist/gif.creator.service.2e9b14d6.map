{"version":3,"sources":["C:\\Users\\Powell\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\process\\browser.js","node_modules\\babylonjs-gifexporter\\dist\\js\\gif.creator.service.js"],"names":["process","module","exports","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","Error","defaultClearTimeout","setTimeout","e","clearTimeout","runTimeout","fun","call","runClearTimeout","marker","queue","draining","currentQueue","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","nextTick","args","Array","arguments","i","push","Item","array","prototype","apply","title","browser","env","argv","version","versions","noop","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAIA,UAAUC,OAAOC,OAAP,GAAiB,EAA/B;;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,gBAAJ;AACA,IAAIC,kBAAJ;;AAEA,SAASC,gBAAT,GAA4B;AACxB,UAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACH;AACD,SAASC,mBAAT,GAAgC;AAC5B,UAAM,IAAID,KAAJ,CAAU,mCAAV,CAAN;AACH;AACA,aAAY;AACT,QAAI;AACA,YAAI,OAAOE,UAAP,KAAsB,UAA1B,EAAsC;AAClCL,+BAAmBK,UAAnB;AACH,SAFD,MAEO;AACHL,+BAAmBE,gBAAnB;AACH;AACJ,KAND,CAME,OAAOI,CAAP,EAAU;AACRN,2BAAmBE,gBAAnB;AACH;AACD,QAAI;AACA,YAAI,OAAOK,YAAP,KAAwB,UAA5B,EAAwC;AACpCN,iCAAqBM,YAArB;AACH,SAFD,MAEO;AACHN,iCAAqBG,mBAArB;AACH;AACJ,KAND,CAME,OAAOE,CAAP,EAAU;AACRL,6BAAqBG,mBAArB;AACH;AACJ,CAnBA,GAAD;AAoBA,SAASI,UAAT,CAAoBC,GAApB,EAAyB;AACrB,QAAIT,qBAAqBK,UAAzB,EAAqC;AACjC;AACA,eAAOA,WAAWI,GAAX,EAAgB,CAAhB,CAAP;AACH;AACD;AACA,QAAI,CAACT,qBAAqBE,gBAArB,IAAyC,CAACF,gBAA3C,KAAgEK,UAApE,EAAgF;AAC5EL,2BAAmBK,UAAnB;AACA,eAAOA,WAAWI,GAAX,EAAgB,CAAhB,CAAP;AACH;AACD,QAAI;AACA;AACA,eAAOT,iBAAiBS,GAAjB,EAAsB,CAAtB,CAAP;AACH,KAHD,CAGE,OAAMH,CAAN,EAAQ;AACN,YAAI;AACA;AACA,mBAAON,iBAAiBU,IAAjB,CAAsB,IAAtB,EAA4BD,GAA5B,EAAiC,CAAjC,CAAP;AACH,SAHD,CAGE,OAAMH,CAAN,EAAQ;AACN;AACA,mBAAON,iBAAiBU,IAAjB,CAAsB,IAAtB,EAA4BD,GAA5B,EAAiC,CAAjC,CAAP;AACH;AACJ;AAGJ;AACD,SAASE,eAAT,CAAyBC,MAAzB,EAAiC;AAC7B,QAAIX,uBAAuBM,YAA3B,EAAyC;AACrC;AACA,eAAOA,aAAaK,MAAb,CAAP;AACH;AACD;AACA,QAAI,CAACX,uBAAuBG,mBAAvB,IAA8C,CAACH,kBAAhD,KAAuEM,YAA3E,EAAyF;AACrFN,6BAAqBM,YAArB;AACA,eAAOA,aAAaK,MAAb,CAAP;AACH;AACD,QAAI;AACA;AACA,eAAOX,mBAAmBW,MAAnB,CAAP;AACH,KAHD,CAGE,OAAON,CAAP,EAAS;AACP,YAAI;AACA;AACA,mBAAOL,mBAAmBS,IAAnB,CAAwB,IAAxB,EAA8BE,MAA9B,CAAP;AACH,SAHD,CAGE,OAAON,CAAP,EAAS;AACP;AACA;AACA,mBAAOL,mBAAmBS,IAAnB,CAAwB,IAAxB,EAA8BE,MAA9B,CAAP;AACH;AACJ;AAIJ;AACD,IAAIC,QAAQ,EAAZ;AACA,IAAIC,WAAW,KAAf;AACA,IAAIC,YAAJ;AACA,IAAIC,aAAa,CAAC,CAAlB;;AAEA,SAASC,eAAT,GAA2B;AACvB,QAAI,CAACH,QAAD,IAAa,CAACC,YAAlB,EAAgC;AAC5B;AACH;AACDD,eAAW,KAAX;AACA,QAAIC,aAAaG,MAAjB,EAAyB;AACrBL,gBAAQE,aAAaI,MAAb,CAAoBN,KAApB,CAAR;AACH,KAFD,MAEO;AACHG,qBAAa,CAAC,CAAd;AACH;AACD,QAAIH,MAAMK,MAAV,EAAkB;AACdE;AACH;AACJ;;AAED,SAASA,UAAT,GAAsB;AAClB,QAAIN,QAAJ,EAAc;AACV;AACH;AACD,QAAIO,UAAUb,WAAWS,eAAX,CAAd;AACAH,eAAW,IAAX;;AAEA,QAAIQ,MAAMT,MAAMK,MAAhB;AACA,WAAMI,GAAN,EAAW;AACPP,uBAAeF,KAAf;AACAA,gBAAQ,EAAR;AACA,eAAO,EAAEG,UAAF,GAAeM,GAAtB,EAA2B;AACvB,gBAAIP,YAAJ,EAAkB;AACdA,6BAAaC,UAAb,EAAyBO,GAAzB;AACH;AACJ;AACDP,qBAAa,CAAC,CAAd;AACAM,cAAMT,MAAMK,MAAZ;AACH;AACDH,mBAAe,IAAf;AACAD,eAAW,KAAX;AACAH,oBAAgBU,OAAhB;AACH;;AAEDxB,QAAQ2B,QAAR,GAAmB,UAAUf,GAAV,EAAe;AAC9B,QAAIgB,OAAO,IAAIC,KAAJ,CAAUC,UAAUT,MAAV,GAAmB,CAA7B,CAAX;AACA,QAAIS,UAAUT,MAAV,GAAmB,CAAvB,EAA0B;AACtB,aAAK,IAAIU,IAAI,CAAb,EAAgBA,IAAID,UAAUT,MAA9B,EAAsCU,GAAtC,EAA2C;AACvCH,iBAAKG,IAAI,CAAT,IAAcD,UAAUC,CAAV,CAAd;AACH;AACJ;AACDf,UAAMgB,IAAN,CAAW,IAAIC,IAAJ,CAASrB,GAAT,EAAcgB,IAAd,CAAX;AACA,QAAIZ,MAAMK,MAAN,KAAiB,CAAjB,IAAsB,CAACJ,QAA3B,EAAqC;AACjCN,mBAAWY,UAAX;AACH;AACJ,CAXD;;AAaA;AACA,SAASU,IAAT,CAAcrB,GAAd,EAAmBsB,KAAnB,EAA0B;AACtB,SAAKtB,GAAL,GAAWA,GAAX;AACA,SAAKsB,KAAL,GAAaA,KAAb;AACH;AACDD,KAAKE,SAAL,CAAeT,GAAf,GAAqB,YAAY;AAC7B,SAAKd,GAAL,CAASwB,KAAT,CAAe,IAAf,EAAqB,KAAKF,KAA1B;AACH,CAFD;AAGAlC,QAAQqC,KAAR,GAAgB,SAAhB;AACArC,QAAQsC,OAAR,GAAkB,IAAlB;AACAtC,QAAQuC,GAAR,GAAc,EAAd;AACAvC,QAAQwC,IAAR,GAAe,EAAf;AACAxC,QAAQyC,OAAR,GAAkB,EAAlB,EAAsB;AACtBzC,QAAQ0C,QAAR,GAAmB,EAAnB;;AAEA,SAASC,IAAT,GAAgB,CAAE;;AAElB3C,QAAQ4C,EAAR,GAAaD,IAAb;AACA3C,QAAQ6C,WAAR,GAAsBF,IAAtB;AACA3C,QAAQ8C,IAAR,GAAeH,IAAf;AACA3C,QAAQ+C,GAAR,GAAcJ,IAAd;AACA3C,QAAQgD,cAAR,GAAyBL,IAAzB;AACA3C,QAAQiD,kBAAR,GAA6BN,IAA7B;AACA3C,QAAQkD,IAAR,GAAeP,IAAf;AACA3C,QAAQmD,eAAR,GAA0BR,IAA1B;AACA3C,QAAQoD,mBAAR,GAA8BT,IAA9B;;AAEA3C,QAAQqD,SAAR,GAAoB,UAAUC,IAAV,EAAgB;AAAE,WAAO,EAAP;AAAW,CAAjD;;AAEAtD,QAAQuD,OAAR,GAAkB,UAAUD,IAAV,EAAgB;AAC9B,UAAM,IAAIhD,KAAJ,CAAU,kCAAV,CAAN;AACH,CAFD;;AAIAN,QAAQwD,GAAR,GAAc,YAAY;AAAE,WAAO,GAAP;AAAY,CAAxC;AACAxD,QAAQyD,KAAR,GAAgB,UAAUC,GAAV,EAAe;AAC3B,UAAM,IAAIpD,KAAJ,CAAU,gCAAV,CAAN;AACH,CAFD;AAGAN,QAAQ2D,KAAR,GAAgB,YAAW;AAAE,WAAO,CAAP;AAAW,CAAxC;;;;ACvfile":"gif.creator.service.2e9b14d6.map","sourceRoot":"..","sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/* ----------------------------------------------NeuQuant START---------------------------------------------------------- */\r\n/** NeuQuant Neural-Net Quantization Algorithm\r\n * ------------------------------------------\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\r\n * See \"Kohonen neural networks for optimal colour quantization\"\r\n * in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\r\n * for a discussion of the algorithm.\r\n * See also  http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal\r\n * in this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons who receive\r\n * copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n *\r\n * (JavaScript port 2012 by Johan Nordberg)\r\n * @author Anthony Powell (Typescript 2018)\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\n(function (factory) {\r\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        var v = factory(require, exports);\r\n        if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === \"function\" && define.amd) {\r\n        define([\"require\", \"exports\"], factory);\r\n    }\r\n})(function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var NeuQuant = /** @class */ (function () {\r\n        /**\r\n         * Constructor: init\r\n         * sets up arrays\r\n         */\r\n        function NeuQuant(pixels, samplefac) {\r\n            this.ncycles = 100; // number of learning cycles\r\n            this.netsize = 256; // number of colors used\r\n            this.maxnetpos = this.netsize - 1;\r\n            // defs for freq and bias\r\n            this.netbiasshift = 4; // bias for colour values\r\n            this.intbiasshift = 16; // bias for fractions\r\n            this.intbias = 1 << this.intbiasshift;\r\n            this.gammashift = 10;\r\n            this.gamma = 1 << this.gammashift;\r\n            this.betashift = 10;\r\n            this.beta = this.intbias >> this.betashift; /* beta = 1/1024 */\r\n            this.betagamma = this.intbias << (this.gammashift - this.betashift);\r\n            // defs for decreasing radius factor\r\n            this.initrad = this.netsize >> 3; // for 256 cols, radius starts\r\n            this.radiusbiasshift = 6; // at 32.0 biased by 6 bits\r\n            this.radiusbias = 1 << this.radiusbiasshift;\r\n            this.initradius = this.initrad * this.radiusbias; //and decreases by a\r\n            this.radiusdec = 30; // factor of 1/30 each cycle\r\n            // defs for decreasing alpha factor\r\n            this.alphabiasshift = 10; // alpha starts at 1.0\r\n            this.initalpha = 1 << this.alphabiasshift;\r\n            /* radbias and alpharadbias used for radpower calculation */\r\n            this.radbiasshift = 8;\r\n            this.radbias = 1 << this.radbiasshift;\r\n            this.alpharadbshift = this.alphabiasshift + this.radbiasshift;\r\n            this.alpharadbias = 1 << this.alpharadbshift;\r\n            // four primes near 500 - assume no image has a length so large that it is\r\n            // divisible by all four primes\r\n            this.prime1 = 499;\r\n            this.prime2 = 491;\r\n            this.prime3 = 487;\r\n            this.prime4 = 503;\r\n            this.minpicturebytes = 3 * this.prime4;\r\n            this.network = []; // int[netsize][4]\r\n            this.netindex = []; // for network lookup - really 256\r\n            // bias and freq arrays for learning\r\n            this.bias = [];\r\n            this.freq = [];\r\n            this.radpower = [];\r\n            var v;\r\n            this.pixels = pixels;\r\n            this.samplefac = samplefac;\r\n            for (var i = 0; i < this.netsize; i++) {\r\n                v = (i << (this.netbiasshift + 8)) / this.netsize;\r\n                this.network[i] = [v, v, v];\r\n                this.freq[i] = this.intbias / this.netsize;\r\n                this.bias[i] = 0;\r\n            }\r\n        }\r\n        NeuQuant.prototype.toInt = function (v) {\r\n            return ~~v;\r\n        };\r\n        NeuQuant.prototype.unbiasnet = function () {\r\n            for (var i = 0; i < this.netsize; i++) {\r\n                this.network[i][0] >>= this.netbiasshift;\r\n                this.network[i][1] >>= this.netbiasshift;\r\n                this.network[i][2] >>= this.netbiasshift;\r\n                this.network[i][3] = i; // record color number\r\n            }\r\n        };\r\n        NeuQuant.prototype.altersingle = function (alpha, i, b, g, r) {\r\n            this.network[i][0] -= (alpha * (this.network[i][0] - b)) / this.initalpha;\r\n            this.network[i][1] -= (alpha * (this.network[i][1] - g)) / this.initalpha;\r\n            this.network[i][2] -= (alpha * (this.network[i][2] - r)) / this.initalpha;\r\n        };\r\n        NeuQuant.prototype.alterneigh = function (radius, i, b, g, r) {\r\n            var lo = Math.abs(i - radius);\r\n            var hi = Math.min(i + radius, this.netsize);\r\n            var j = i + 1;\r\n            var k = i - 1;\r\n            var m = 1;\r\n            var p, a;\r\n            while (j < hi || k > lo) {\r\n                a = this.radpower[m++];\r\n                if (j < hi) {\r\n                    p = this.network[j++];\r\n                    p[0] -= (a * (p[0] - b)) / this.alpharadbias;\r\n                    p[1] -= (a * (p[1] - g)) / this.alpharadbias;\r\n                    p[2] -= (a * (p[2] - r)) / this.alpharadbias;\r\n                }\r\n                if (k > lo) {\r\n                    p = this.network[k--];\r\n                    p[0] -= (a * (p[0] - b)) / this.alpharadbias;\r\n                    p[1] -= (a * (p[1] - g)) / this.alpharadbias;\r\n                    p[2] -= (a * (p[2] - r)) / this.alpharadbias;\r\n                }\r\n            }\r\n        };\r\n        NeuQuant.prototype.contest = function (b, g, r) {\r\n            /*\r\n            finds closest neuron (min dist) and updates freq\r\n            finds best neuron (min dist-bias) and returns position\r\n            for frequently chosen neurons, freq[i] is high and bias[i] is negative\r\n            bias[i] = gamma * ((1 / netsize) - freq[i])\r\n          */\r\n            var bestd = ~(1 << 31);\r\n            var bestbiasd = bestd;\r\n            var bestpos = -1;\r\n            var bestbiaspos = bestpos;\r\n            var i, n, dist, biasdist, betafreq;\r\n            for (i = 0; i < this.netsize; i++) {\r\n                n = this.network[i];\r\n                dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);\r\n                if (dist < bestd) {\r\n                    bestd = dist;\r\n                    bestpos = i;\r\n                }\r\n                biasdist = dist - (this.bias[i] >> (this.intbiasshift - this.netbiasshift));\r\n                if (biasdist < bestbiasd) {\r\n                    bestbiasd = biasdist;\r\n                    bestbiaspos = i;\r\n                }\r\n                betafreq = this.freq[i] >> this.betashift;\r\n                this.freq[i] -= betafreq;\r\n                this.bias[i] += betafreq << this.gammashift;\r\n            }\r\n            this.freq[bestpos] += this.beta;\r\n            this.bias[bestpos] -= this.betagamma;\r\n            return bestbiaspos;\r\n        };\r\n        NeuQuant.prototype.inxbuild = function () {\r\n            var i, j, p, q, smallpos, smallval, previouscol = 0, startpos = 0;\r\n            for (i = 0; i < this.netsize; i++) {\r\n                p = this.network[i];\r\n                smallpos = i;\r\n                smallval = p[1]; // index on g\r\n                // find smallest in i..netsize-1\r\n                for (j = i + 1; j < this.netsize; j++) {\r\n                    q = this.network[j];\r\n                    if (q[1] < smallval) {\r\n                        // index on g\r\n                        smallpos = j;\r\n                        smallval = q[1]; // index on g\r\n                    }\r\n                }\r\n                q = this.network[smallpos];\r\n                // swap p (i) and q (smallpos) entries\r\n                if (i != smallpos) {\r\n                    j = q[0];\r\n                    q[0] = p[0];\r\n                    p[0] = j;\r\n                    j = q[1];\r\n                    q[1] = p[1];\r\n                    p[1] = j;\r\n                    j = q[2];\r\n                    q[2] = p[2];\r\n                    p[2] = j;\r\n                    j = q[3];\r\n                    q[3] = p[3];\r\n                    p[3] = j;\r\n                }\r\n                // smallval entry is now in position i\r\n                if (smallval != previouscol) {\r\n                    this.netindex[previouscol] = (startpos + i) >> 1;\r\n                    for (j = previouscol + 1; j < smallval; j++)\r\n                        this.netindex[j] = i;\r\n                    previouscol = smallval;\r\n                    startpos = i;\r\n                }\r\n            }\r\n            this.netindex[previouscol] = (startpos + this.maxnetpos) >> 1;\r\n            for (j = previouscol + 1; j < 256; j++)\r\n                this.netindex[j] = this.maxnetpos; // really 256\r\n        };\r\n        NeuQuant.prototype.lookupRGB = function (b, g, r) {\r\n            var a, p, dist;\r\n            var bestd = 1000; // biggest possible dist is 256*3\r\n            var best = -1;\r\n            var i = this.netindex[g]; // index on g\r\n            var j = i - 1; // start at netindex[g] and work outwards\r\n            while (i < this.netsize || j >= 0) {\r\n                if (i < this.netsize) {\r\n                    p = this.network[i];\r\n                    dist = p[1] - g; // inx key\r\n                    if (dist >= bestd)\r\n                        i = this.netsize;\r\n                    // stop iter\r\n                    else {\r\n                        i++;\r\n                        if (dist < 0)\r\n                            dist = -dist;\r\n                        a = p[0] - b;\r\n                        if (a < 0)\r\n                            a = -a;\r\n                        dist += a;\r\n                        if (dist < bestd) {\r\n                            a = p[2] - r;\r\n                            if (a < 0)\r\n                                a = -a;\r\n                            dist += a;\r\n                            if (dist < bestd) {\r\n                                bestd = dist;\r\n                                best = p[3];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (j >= 0) {\r\n                    p = this.network[j];\r\n                    dist = g - p[1]; // inx key - reverse dif\r\n                    if (dist >= bestd)\r\n                        j = -1;\r\n                    // stop iter\r\n                    else {\r\n                        j--;\r\n                        if (dist < 0)\r\n                            dist = -dist;\r\n                        a = p[0] - b;\r\n                        if (a < 0)\r\n                            a = -a;\r\n                        dist += a;\r\n                        if (dist < bestd) {\r\n                            a = p[2] - r;\r\n                            if (a < 0)\r\n                                a = -a;\r\n                            dist += a;\r\n                            if (dist < bestd) {\r\n                                bestd = dist;\r\n                                best = p[3];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return best;\r\n        };\r\n        NeuQuant.prototype.learn = function () {\r\n            var i;\r\n            var lengthcount = this.pixels.length;\r\n            var alphadec = this.toInt(30 + (this.samplefac - 1) / 3);\r\n            var samplepixels = this.toInt(lengthcount / (3 * this.samplefac));\r\n            var delta = this.toInt(samplepixels / this.ncycles);\r\n            var alpha = this.initalpha;\r\n            var radius = this.initradius;\r\n            var rad = radius >> this.radiusbiasshift;\r\n            if (rad <= 1)\r\n                rad = 0;\r\n            for (i = 0; i < rad; i++)\r\n                this.radpower[i] = this.toInt(alpha * (((rad * rad - i * i) * this.radbias) / (rad * rad)));\r\n            var step;\r\n            if (lengthcount < this.minpicturebytes) {\r\n                this.samplefac = 1;\r\n                step = 3;\r\n            }\r\n            else if (lengthcount % this.prime1 !== 0) {\r\n                step = 3 * this.prime1;\r\n            }\r\n            else if (lengthcount % this.prime2 !== 0) {\r\n                step = 3 * this.prime2;\r\n            }\r\n            else if (lengthcount % this.prime3 !== 0) {\r\n                step = 3 * this.prime3;\r\n            }\r\n            else {\r\n                step = 3 * this.prime4;\r\n            }\r\n            var b, g, r, j;\r\n            var pix = 0; // current pixel\r\n            i = 0;\r\n            while (i < samplepixels) {\r\n                b = (this.pixels[pix] & 0xff) << this.netbiasshift;\r\n                g = (this.pixels[pix + 1] & 0xff) << this.netbiasshift;\r\n                r = (this.pixels[pix + 2] & 0xff) << this.netbiasshift;\r\n                j = this.contest(b, g, r);\r\n                this.altersingle(alpha, j, b, g, r);\r\n                if (rad !== 0)\r\n                    this.alterneigh(rad, j, b, g, r); // alter neighbours\r\n                pix += step;\r\n                if (pix >= lengthcount)\r\n                    pix -= lengthcount;\r\n                i++;\r\n                if (delta === 0)\r\n                    delta = 1;\r\n                if (i % delta === 0) {\r\n                    alpha -= alpha / alphadec;\r\n                    radius -= radius / this.radiusdec;\r\n                    rad = radius >> this.radiusbiasshift;\r\n                    if (rad <= 1)\r\n                        rad = 0;\r\n                    for (j = 0; j < rad; j++)\r\n                        this.radpower[j] = this.toInt(alpha * (((rad * rad - j * j) * this.radbias) / (rad * rad)));\r\n                }\r\n            }\r\n        };\r\n        NeuQuant.prototype.buildColormap = function () {\r\n            this.learn();\r\n            this.unbiasnet();\r\n            this.inxbuild();\r\n        };\r\n        NeuQuant.prototype.getColormap = function () {\r\n            var map = [];\r\n            var index = [];\r\n            for (var i = 0; i < this.netsize; i++)\r\n                index[this.network[i][3]] = i;\r\n            var k = 0;\r\n            for (var l = 0; l < this.netsize; l++) {\r\n                var j = index[l];\r\n                map[k++] = this.network[j][0];\r\n                map[k++] = this.network[j][1];\r\n                map[k++] = this.network[j][2];\r\n            }\r\n            return map;\r\n        };\r\n        return NeuQuant;\r\n    }());\r\n    exports.NeuQuant = NeuQuant;\r\n    /* ----------------------------------------------NeuQuant END---------------------------------------------------------- */\r\n    /* ----------------------------------------------ColorTableGen START---------------------------------------------------------- */\r\n    var ColorTableGenerator = /** @class */ (function () {\r\n        function ColorTableGenerator(frame) {\r\n            this._colorTable = [];\r\n            this._GCT = [];\r\n            this._distribution = 51;\r\n            this._colorLookup = {};\r\n            this._neuQuant = new NeuQuant(frame, 20);\r\n            this._neuQuant.buildColormap();\r\n            this._colorTable = this._neuQuant.getColormap();\r\n        }\r\n        ColorTableGenerator.prototype.generate = function () {\r\n            var _this = this;\r\n            var pixel = '';\r\n            var count = 0;\r\n            this._colorTable.forEach(function (value, index, array) {\r\n                pixel += _this.pad(value);\r\n                if ((index + 1) % 3 === 0) {\r\n                    _this._GCT.push(pixel);\r\n                    _this._colorLookup[pixel] = count;\r\n                    count++;\r\n                    pixel = '';\r\n                }\r\n                if (index === _this._colorTable.length - 1)\r\n                    return [_this._colorLookup, _this._GCT];\r\n            });\r\n            return [this._colorLookup, this._GCT];\r\n        };\r\n        ColorTableGenerator.prototype.lookupRGB = function (pixel) {\r\n            var R = parseInt(pixel.substr(0, 2), 16);\r\n            var G = parseInt(pixel.substr(2, 2), 16);\r\n            var B = parseInt(pixel.substr(4, 2), 16);\r\n            var pixelIndex = this._neuQuant.lookupRGB(R, G, B);\r\n            return pixelIndex;\r\n        };\r\n        ColorTableGenerator.prototype.pad = function (color) {\r\n            if (color < 16) {\r\n                return \"0\" + color.toString(16);\r\n            }\r\n            else {\r\n                return color.toString(16);\r\n            }\r\n        };\r\n        return ColorTableGenerator;\r\n    }());\r\n    exports.ColorTableGenerator = ColorTableGenerator;\r\n    /* ----------------------------------------------ColorTableGen END---------------------------------------------------------- */\r\n    /* ----------------------------------------------EncodedImage START---------------------------------------------------------- */\r\n    var EncodedImage = /** @class */ (function () {\r\n        function EncodedImage() {\r\n            this.data = [];\r\n        }\r\n        EncodedImage.prototype.get = function () {\r\n            return this.data;\r\n        };\r\n        EncodedImage.prototype.write = function (byte) {\r\n            this.data.push(byte);\r\n        };\r\n        EncodedImage.prototype.writeArray = function (array, arraySize) {\r\n            for (var i = 0; i < arraySize; i++) {\r\n                this.write(array[i]);\r\n            }\r\n        };\r\n        EncodedImage.prototype.writeUTF = function (UTF) {\r\n            for (var i = 0; i < UTF.length; i++) {\r\n                this.write(UTF.charCodeAt(i));\r\n            }\r\n        };\r\n        EncodedImage.prototype.writeColor = function (color) {\r\n            for (var i = 0; i < color.length; i += 2) {\r\n                var intValue = parseInt(color[i] + color[i + 1], 16);\r\n                this.write(intValue);\r\n            }\r\n        };\r\n        EncodedImage.prototype.writeLittleEndian = function (num) {\r\n            this.write(num & 0xff);\r\n            this.write((num >> 8) & 0xff);\r\n        };\r\n        EncodedImage.prototype.reset = function () {\r\n            this.data = [];\r\n        };\r\n        return EncodedImage;\r\n    }());\r\n    exports.EncodedImage = EncodedImage;\r\n    /* ----------------------------------------------EncodedImage END---------------------------------------------------------- */\r\n    /* ----------------------------------------------TypedLZW START---------------------------------------------------------- */\r\n    /**\r\n     * This class handles LZW encoding\r\n     * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\r\n     * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\r\n     * @author Thibault Imbert (AS3 version - bytearray.org)\r\n     * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\r\n     * @author Anthony Powell (TypeScript version 2018)\r\n     * @version 0.1 AS3 implementation\r\n     */\r\n    var LZWEncoder = /** @class */ (function () {\r\n        function LZWEncoder(width, height, pixels, colorDepth) {\r\n            this.EOF = 1;\r\n            // GIFCOMPR.C - GIF Image compression routines\r\n            // Lempel-Ziv compression based on 'compress'. GIF modifications by\r\n            // David Rowley (mgardi@watdcsu.waterloo.edu)\r\n            // General DEFINEs\r\n            this.BITS = 12;\r\n            this.HSIZE = 5003;\r\n            this._maxbits = this.BITS; // user settable max # bits/code\r\n            this._maxmaxcode = 1 << this.BITS; // should NEVER generate this code\r\n            this._htab = [];\r\n            this._codetab = [];\r\n            this._hsize = this.HSIZE; // for dynamic table sizing\r\n            this._free_ent = 0; // first unused entry\r\n            // block compression parameters -- after all codes are used up,\r\n            // and compression rate changes, start over.\r\n            this._clear_flg = false;\r\n            // output\r\n            // Output the given code.\r\n            // Inputs:\r\n            // code: A n_bits-bit integer. If == -1, then EOF. This assumes\r\n            // that n_bits =< wordsize - 1.\r\n            // Outputs:\r\n            // Outputs code to the file.\r\n            // Assumptions:\r\n            // Chars are 8 bits long.\r\n            // Algorithm:\r\n            // Maintain a BITS character long buffer (so that 8 codes will\r\n            // fit in it exactly). Use the VAX insv instruction to insert each\r\n            // code in turn. When the buffer fills up empty it and start over.\r\n            this._cur_accum = 0;\r\n            this._cur_bits = 0;\r\n            this._masks = [\r\n                0x0000,\r\n                0x0001,\r\n                0x0003,\r\n                0x0007,\r\n                0x000f,\r\n                0x001f,\r\n                0x003f,\r\n                0x007f,\r\n                0x00ff,\r\n                0x01ff,\r\n                0x03ff,\r\n                0x07ff,\r\n                0x0fff,\r\n                0x1fff,\r\n                0x3fff,\r\n                0x7fff,\r\n                0xffff,\r\n            ];\r\n            // Define the storage for the packet accumulator\r\n            this._accum = [];\r\n            this._imgW = width;\r\n            this._imgH = height;\r\n            this._pixels = pixels;\r\n            this._initCodeSize = Math.max(2, colorDepth);\r\n        }\r\n        // Add a character to the end of the current packet, and if it is 254\r\n        // characters, flush the packet to disk.\r\n        LZWEncoder.prototype.writeCharToPacket = function (c, outs) {\r\n            this._accum[this._a_count++] = c;\r\n            if (this._a_count >= 254)\r\n                this.flush_char(outs);\r\n        };\r\n        // Clear out the hash table\r\n        // table clear for block compress\r\n        LZWEncoder.prototype.cl_block = function (outs) {\r\n            this.cl_hash(this._hsize);\r\n            this._free_ent = this._ClearCode + 2;\r\n            this._clear_flg = true;\r\n            this.output(this._ClearCode, outs);\r\n        };\r\n        // reset code table\r\n        LZWEncoder.prototype.cl_hash = function (hsize) {\r\n            for (var i = 0; i < hsize; ++i)\r\n                this._htab[i] = -1;\r\n        };\r\n        LZWEncoder.prototype.compress = function (init_bits, outs) {\r\n            var fcode;\r\n            var i; /* = 0 */\r\n            var c;\r\n            var ent;\r\n            var disp;\r\n            var hsize_reg;\r\n            var hshift;\r\n            // Set up the globals: g_init_bits - initial number of bits\r\n            this._g_init_bits = init_bits;\r\n            // Set up the necessary values\r\n            this._clear_flg = false;\r\n            this._n_bits = this._g_init_bits;\r\n            this._maxcode = this.MAXCODE(this._n_bits);\r\n            this._ClearCode = 1 << (init_bits - 1);\r\n            this._EOFCode = this._ClearCode + 1;\r\n            this._free_ent = this._ClearCode + 2;\r\n            this._a_count = 0; // clear packet\r\n            ent = this.nextPixel();\r\n            hshift = 0;\r\n            for (fcode = this._hsize; fcode < 65536; fcode *= 2)\r\n                ++hshift;\r\n            hshift = 8 - hshift; // set hash code range bound\r\n            hsize_reg = this._hsize;\r\n            this.cl_hash(hsize_reg); // clear hash table\r\n            this.output(this._ClearCode, outs);\r\n            outer_loop: while ((c = this.nextPixel()) != this.EOF) {\r\n                fcode = (c << this._maxbits) + ent;\r\n                i = (c << hshift) ^ ent; // xor hashing\r\n                if (this._htab[i] == fcode) {\r\n                    ent = this._codetab[i];\r\n                    continue;\r\n                }\r\n                else if (this._htab[i] >= 0) {\r\n                    // non-empty slot\r\n                    disp = hsize_reg - i; // secondary hash (after G. Knott)\r\n                    if (i === 0)\r\n                        disp = 1;\r\n                    do {\r\n                        if ((i -= disp) < 0)\r\n                            i += hsize_reg;\r\n                        if (this._htab[i] == fcode) {\r\n                            ent = this._codetab[i];\r\n                            continue outer_loop;\r\n                        }\r\n                    } while (this._htab[i] >= 0);\r\n                }\r\n                this.output(ent, outs);\r\n                ent = c;\r\n                if (this._free_ent < this._maxmaxcode) {\r\n                    this._codetab[i] = this._free_ent++; // code -> hashtable\r\n                    this._htab[i] = fcode;\r\n                }\r\n                else\r\n                    this.cl_block(outs);\r\n            }\r\n            // Put out the final code.\r\n            this.output(ent, outs);\r\n            this.output(this._EOFCode, outs);\r\n        };\r\n        // ----------------------------------------------------------------------------\r\n        LZWEncoder.prototype.encode = function (os) {\r\n            os.write(this._initCodeSize); // write \"initial code size\" byte\r\n            this._remaining = this._imgW * this._imgH; // reset navigation variables\r\n            this._curPixel = 0;\r\n            this.compress(this._initCodeSize + 1, os); // compress and write the pixel data\r\n            os.write(0); // write block terminator\r\n        };\r\n        // Flush the packet to disk, and reset the accumulator\r\n        LZWEncoder.prototype.flush_char = function (outs) {\r\n            if (this._a_count > 0) {\r\n                outs.write(this._a_count);\r\n                outs.writeArray(this._accum, this._a_count);\r\n                this._a_count = 0;\r\n            }\r\n        };\r\n        LZWEncoder.prototype.MAXCODE = function (n_bits) {\r\n            return (1 << n_bits) - 1;\r\n        };\r\n        // ----------------------------------------------------------------------------\r\n        // Return the next pixel from the image\r\n        // ----------------------------------------------------------------------------\r\n        LZWEncoder.prototype.nextPixel = function () {\r\n            if (this._remaining === 0)\r\n                return this.EOF;\r\n            --this._remaining;\r\n            var pix = this._pixels[this._curPixel++];\r\n            return pix & 0xff;\r\n        };\r\n        LZWEncoder.prototype.output = function (code, outs) {\r\n            this._cur_accum &= this._masks[this._cur_bits];\r\n            if (this._cur_bits > 0)\r\n                this._cur_accum |= code << this._cur_bits;\r\n            else\r\n                this._cur_accum = code;\r\n            this._cur_bits += this._n_bits;\r\n            while (this._cur_bits >= 8) {\r\n                this.writeCharToPacket(this._cur_accum & 0xff, outs);\r\n                this._cur_accum >>= 8;\r\n                this._cur_bits -= 8;\r\n            }\r\n            // If the next entry is going to be too big for the code size,\r\n            // then increase it, if possible.\r\n            if (this._free_ent > this._maxcode || this._clear_flg) {\r\n                if (this._clear_flg) {\r\n                    this._maxcode = this.MAXCODE((this._n_bits = this._g_init_bits));\r\n                    this._clear_flg = false;\r\n                }\r\n                else {\r\n                    ++this._n_bits;\r\n                    if (this._n_bits == this._maxbits)\r\n                        this._maxcode = this._maxmaxcode;\r\n                    else\r\n                        this._maxcode = this.MAXCODE(this._n_bits);\r\n                }\r\n            }\r\n            if (code == this._EOFCode) {\r\n                // At EOF, write the rest of the buffer.\r\n                while (this._cur_bits > 0) {\r\n                    this.writeCharToPacket(this._cur_accum & 0xff, outs);\r\n                    this._cur_accum >>= 8;\r\n                    this._cur_bits -= 8;\r\n                }\r\n                this.flush_char(outs);\r\n            }\r\n        };\r\n        return LZWEncoder;\r\n    }());\r\n    exports.LZWEncoder = LZWEncoder;\r\n    /* ----------------------------------------------TypedLZW END---------------------------------------------------------- */\r\n    /* ----------------------------------------------GIFGen START---------------------------------------------------------- */\r\n    var GIFGenerator = /** @class */ (function () {\r\n        function GIFGenerator() {\r\n            this.stream = new EncodedImage();\r\n            this.frameCount = 0;\r\n            console.log(\"Generator now running...\");\r\n        }\r\n        GIFGenerator.prototype.init = function (width, height, GCT) {\r\n            this.reset();\r\n            this.width = width;\r\n            this.height = height;\r\n            this.GCT = GCT;\r\n            this.writeHeader();\r\n            this.writeLogicalScreenDescriptor();\r\n            this.writeGlobalColorTable();\r\n            this.writeApplicationExtension();\r\n        };\r\n        GIFGenerator.prototype.generateFrame = function (indexedPixels) {\r\n            this.frameIndexedPixels = indexedPixels;\r\n            this.frameCount += 1;\r\n            console.log(\"generating frame \" + this.frameCount);\r\n            this.writeGraphicControlExtension();\r\n            this.writeImageDescriptor();\r\n            this.writeImageData();\r\n        };\r\n        GIFGenerator.prototype.getStream = function () {\r\n            this.writeTrailer();\r\n            return this.stream.get();\r\n        };\r\n        GIFGenerator.prototype.writeHeader = function () {\r\n            this.stream.writeUTF('GIF89a'); /* GIF Header */\r\n        };\r\n        GIFGenerator.prototype.writeLogicalScreenDescriptor = function () {\r\n            this.stream.writeLittleEndian(this.width); /* Canvas Width */\r\n            this.stream.writeLittleEndian(this.height); /* Canvas Height */\r\n            this.stream.write(0xf7); /* Packed Field */\r\n            this.stream.write(0); /* Background Color Index */\r\n            this.stream.write(0); /* Pixel Aspect Ration */\r\n        };\r\n        GIFGenerator.prototype.writeGlobalColorTable = function () {\r\n            var _this = this;\r\n            var count = 0;\r\n            this.GCT.forEach(function (color) {\r\n                count += 3;\r\n                _this.stream.writeColor(color);\r\n            });\r\n            for (var i = count; i < 3 * 256; i++) {\r\n                this.stream.write(0);\r\n            }\r\n        };\r\n        GIFGenerator.prototype.writeApplicationExtension = function () {\r\n            this.stream.write(0x21); /* extension introducer */\r\n            this.stream.write(0xff); /* app extension label */\r\n            this.stream.write(11); /* block size */\r\n            this.stream.writeUTF('NETSCAPE' + '2.0'); /* app id + auth code */\r\n            this.stream.write(3); /* sub-block size */\r\n            this.stream.write(1); /* loop sub-block id */\r\n            this.stream.writeLittleEndian(0); /* loop count (extra iterations, 0=repeat forever) */\r\n            this.stream.write(0); /* Block Terminator */\r\n        };\r\n        GIFGenerator.prototype.writeGraphicControlExtension = function () {\r\n            this.stream.write(0x21); /* Extension Introducer */\r\n            this.stream.write(0xf9); /* Graphic Control Label */\r\n            this.stream.write(0x4); /* Byte Size */\r\n            this.stream.write(0x4); /* Packed Field */\r\n            this.stream.writeLittleEndian(0x9); /* Delay Time */\r\n            this.stream.write(0x0); /* Transparent Color Index */\r\n            this.stream.write(0x0); /* Block Terminator */\r\n        };\r\n        GIFGenerator.prototype.writeImageDescriptor = function () {\r\n            this.stream.write(0x2c); /* Image Seperator Always 2C */\r\n            this.stream.writeLittleEndian(0x0); /* Image Left */\r\n            this.stream.writeLittleEndian(0x0); /* Image Top */\r\n            this.stream.writeLittleEndian(this.width); /* Image Width */\r\n            this.stream.writeLittleEndian(this.height); /* Image Height */\r\n            this.stream.write(0x0); /* Block Terminator */\r\n        };\r\n        GIFGenerator.prototype.writeImageData = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var encoder;\r\n                return __generator(this, function (_a) {\r\n                    encoder = new LZWEncoder(this.width, this.height, this.frameIndexedPixels, 8);\r\n                    encoder.encode(this.stream);\r\n                    console.log(\"completed frame \" + this.frameCount);\r\n                    return [2 /*return*/];\r\n                });\r\n            });\r\n        };\r\n        GIFGenerator.prototype.writeTrailer = function () {\r\n            this.stream.write(0x3b); /* Trailer Marker */\r\n            console.log(\"Generator now finished.\");\r\n            this.frameCount = 0; /* Reset frame count for next GIF */\r\n        };\r\n        GIFGenerator.prototype.writeLocalColorTable = function () { };\r\n        GIFGenerator.prototype.writePlainTextExtension = function () { };\r\n        GIFGenerator.prototype.writeCommentExtension = function () { };\r\n        GIFGenerator.prototype.reset = function () {\r\n            this.stream.reset();\r\n            this.frameCount = 0;\r\n        };\r\n        return GIFGenerator;\r\n    }());\r\n    exports.GIFGenerator = GIFGenerator;\r\n    /* ----------------------------------------------GIFGen END---------------------------------------------------------- */\r\n    /* ----------------------------------------------Worker Processing Duties START---------------------------------------------------------- */\r\n    var ctx = self;\r\n    var _colorTableGen;\r\n    var gifGenerator = new GIFGenerator();\r\n    var _frameCollection = [];\r\n    function createColorTable(frame, width, height) {\r\n        _colorTableGen = new ColorTableGenerator(frame);\r\n        var colorLookup, colorTable;\r\n        _a = _colorTableGen.generate(), colorLookup = _a[0], colorTable = _a[1];\r\n        writeColorTable(colorTable, width, height);\r\n        return colorLookup;\r\n        function writeColorTable(globalColorTable, width, height) {\r\n            gifGenerator.init(width, height, globalColorTable);\r\n            return;\r\n        }\r\n        var _a;\r\n    }\r\n    function processFrames(frames, width, height) {\r\n        function process() {\r\n            var numericalRGBFrames = [];\r\n            var stringRGBFrames = [];\r\n            frames.forEach(function (frame) {\r\n                var _a = toRGB(frame), numericalRGBData = _a.numericalRGBData, stringRGBData = _a.stringRGBData;\r\n                numericalRGBFrames.push(numericalRGBData);\r\n                stringRGBFrames.push(stringRGBData);\r\n            });\r\n            return { numericalRGBFrames: numericalRGBFrames, stringRGBFrames: stringRGBFrames };\r\n        }\r\n        function toRGB(frame) {\r\n            var numericalRGBData = frame.filter(function (pixel, index) { return (index + 1) % 4 !== 0; });\r\n            var stringRGBData = [];\r\n            var pixel = '';\r\n            numericalRGBData.forEach(function (color, index) {\r\n                pixel += pad(color);\r\n                if ((index + 1) % 3 === 0) {\r\n                    stringRGBData.push(pixel);\r\n                    pixel = '';\r\n                }\r\n            });\r\n            return { numericalRGBData: numericalRGBData, stringRGBData: stringRGBData };\r\n        }\r\n        function pad(color) {\r\n            if (color < 16) {\r\n                return \"0\" + color.toString(16);\r\n            }\r\n            else {\r\n                return color.toString(16);\r\n            }\r\n        }\r\n        return process();\r\n    }\r\n    function generateGIF(frames, colorLookup) {\r\n        function mapPixelsToIndex(frames, colorLookup) {\r\n            var indexedFrames = [];\r\n            frames.forEach(function (frame, index) {\r\n                var indexedPixels = [];\r\n                frame.forEach(function (pixel) {\r\n                    indexedPixels.push(lookup(pixel));\r\n                });\r\n                indexedFrames.push(indexedPixels);\r\n            });\r\n            return indexedFrames;\r\n        }\r\n        function lookup(pixel) {\r\n            return /* colorLookup[pixel] ? colorLookup[pixel] : */ _colorTableGen.lookupRGB(pixel);\r\n        }\r\n        var indexedFrames = mapPixelsToIndex(frames, colorLookup);\r\n        indexedFrames.forEach(function (frame) {\r\n            gifGenerator.generateFrame(frame);\r\n        });\r\n        return gifGenerator.getStream();\r\n    }\r\n    function collectFrames(frame) {\r\n        _frameCollection.push(new Uint8Array(frame));\r\n    }\r\n    function getColorSamplingFrames(frames) {\r\n        /* every 5 frames placed in sampling frames array */\r\n        var samplingFrames = frames.filter(function (frame, index) { return (index + 1) % 5 === 0; });\r\n        /* Combine arrays in samplingFrames into one Uint8Array */\r\n        return samplingFrames.reduce(function (accFrame, frame) {\r\n            var sampling = new Uint8Array(accFrame.length + frame.length);\r\n            sampling.set(accFrame);\r\n            sampling.set(frame, accFrame.length);\r\n            return sampling;\r\n        }, new Uint8Array([]));\r\n    }\r\n    /* ----------------------------------------------Worker Processing Duties END---------------------------------------------------------- */\r\n    /* ----------------------------------------------Worker Router START---------------------------------------------------------- */\r\n    onmessage = function (_a) {\r\n        var _b = _a.data, job = _b.job, params = _b.params;\r\n        switch (job) {\r\n            case 'createGIF':\r\n                var width = params.width, height = params.height;\r\n                var _c = processFrames(_frameCollection, width, height), numericalRGBFrames = _c.numericalRGBFrames, stringRGBFrames = _c.stringRGBFrames;\r\n                var samplingFrame = getColorSamplingFrames(numericalRGBFrames);\r\n                var colorLookup = createColorTable(samplingFrame, width, height);\r\n                var gifData = generateGIF(stringRGBFrames, colorLookup);\r\n                ctx.postMessage(gifData);\r\n                break;\r\n            case 'collectFrames':\r\n                var frame = params.frame;\r\n                collectFrames(frame);\r\n                break;\r\n        }\r\n    };\r\n});\r\n/* ----------------------------------------------Worker Router END---------------------------------------------------------- */\r\n"]}